/*
 * Evangelos Gkolfinopoulos
 * Ioannis Samartzis
 */
package lcss.project;

import java.awt.Color;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author Devag
 */
public class LCSS_GUI extends javax.swing.JFrame {

    public float paramE = -1;
    public int paramD = -1;
    private int mode = -1;
    private HashMap<String, ArrayList> fileMap = new HashMap<>();
    private HashMap<String, ArrayList> fileMapCopy = new HashMap<>();
    private HashMap<String, ArrayList> fileMap2 = new HashMap<>();
    private ArrayList<Coordinate> coordinatesList = null;
    private ArrayList<Coordinate> tempcoordList = null;
    private ArrayList<String> routeList = new ArrayList<>();
    private ArrayList<String> splits10kList = new ArrayList<>();
    private ArrayList<Coordinate> Route1 = new ArrayList<>();
    private ArrayList<Coordinate> Route2 = new ArrayList<>();
    private boolean taskBusyFlag = false;
    private String fileName;
    private String splitName;
    static Thread thread = null;
    private DefaultListModel dListModel = new DefaultListModel();
    long startTime, endTime, totalTime;

    /**
     * Creates new form LCSS_GUI
     */
    public LCSS_GUI() {
        initComponents();
        pnlMode.setVisible(true);
        pnlParamE.setVisible(true);
        pnlParamD.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpMode = new javax.swing.ButtonGroup();
        btnOK = new javax.swing.JButton();
        pnlMode = new javax.swing.JPanel();
        rdbtn1000 = new javax.swing.JRadioButton();
        rdbtn5000 = new javax.swing.JRadioButton();
        rdbtn10000 = new javax.swing.JRadioButton();
        pnlParamE = new javax.swing.JPanel();
        txtE = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        listConclusion = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        pnlParamD = new javax.swing.JPanel();
        txtD = new javax.swing.JTextField();
        jCheckLCSS = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Longest Common Subsequence");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Calibri", 0, 10)); // NOI18N
        setResizable(false);

        btnOK.setFont(new java.awt.Font("Century Gothic", 3, 14)); // NOI18N
        btnOK.setText("Εκτέλεση");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        pnlMode.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mode:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N

        btngrpMode.add(rdbtn1000);
        rdbtn1000.setText("1000");

        btngrpMode.add(rdbtn5000);
        rdbtn5000.setText("5000");

        btngrpMode.add(rdbtn10000);
        rdbtn10000.setText("10000");

        javax.swing.GroupLayout pnlModeLayout = new javax.swing.GroupLayout(pnlMode);
        pnlMode.setLayout(pnlModeLayout);
        pnlModeLayout.setHorizontalGroup(
            pnlModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModeLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(rdbtn1000)
                .addGap(18, 18, 18)
                .addComponent(rdbtn5000)
                .addGap(18, 18, 18)
                .addComponent(rdbtn10000)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlModeLayout.setVerticalGroup(
            pnlModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(rdbtn1000)
                .addComponent(rdbtn5000)
                .addComponent(rdbtn10000))
        );

        pnlParamE.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Παράμετρος ε:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N

        javax.swing.GroupLayout pnlParamELayout = new javax.swing.GroupLayout(pnlParamE);
        pnlParamE.setLayout(pnlParamELayout);
        pnlParamELayout.setHorizontalGroup(
            pnlParamELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParamELayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtE, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlParamELayout.setVerticalGroup(
            pnlParamELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel1.setFont(new java.awt.Font("Candara", 3, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Longest Common Subsequence");

        tblResults.setFont(new java.awt.Font("Calibri Light", 1, 12)); // NOI18N
        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Διαδρομή 1", "Διαδρομή 2", "Παράμ. ε", "Ομοιότητα (%)", "Χρόνος (ms)", "Παράμ. δ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblResults.setShowVerticalLines(false);
        jScrollPane1.setViewportView(tblResults);

        listConclusion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Συμπεράσματα:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        listConclusion.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jScrollPane2.setViewportView(listConclusion);

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Αποτελέσματα:");

        pnlParamD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Παράμετρος δ:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        pnlParamD.setOpaque(false);

        javax.swing.GroupLayout pnlParamDLayout = new javax.swing.GroupLayout(pnlParamD);
        pnlParamD.setLayout(pnlParamDLayout);
        pnlParamDLayout.setHorizontalGroup(
            pnlParamDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParamDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtD, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlParamDLayout.setVerticalGroup(
            pnlParamDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jCheckLCSS.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jCheckLCSS.setText("LCSS Altered");
        jCheckLCSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckLCSSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(547, 547, 547)
                        .addComponent(btnOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jCheckLCSS)
                                .addGap(54, 54, 54)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnlMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pnlParamD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlParamE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 15, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckLCSS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pnlMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pnlParamD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlParamE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LCSS_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LCSS_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LCSS_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LCSS_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LCSS_GUI().setVisible(true);
                try {
                    while (thread != null) {
                        thread.join();
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(LCSS_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        try {
            if (taskBusyFlag == true) {
                JOptionPane.showMessageDialog(null, "Ο αλγόριθμος εκτελείται ήδη, παρακαλώ περιμένετε.");
                return;
            }
            if (tblResults.getValueAt(0, 0) != null) {
                DefaultTableModel model = (DefaultTableModel) tblResults.getModel();
                // set rows to 0 so that table gets cleared
                model.setRowCount(0);
                // set again 6 rows for our Data
                model.setRowCount(16);
            }
            dListModel.clear();
            dListModel = new DefaultListModel();
            listConclusion.setModel(dListModel);
            thread = new Thread() {
                public void run() {
                    if (!jCheckLCSS.isSelected()) {
                        if (rdbtn1000.isSelected()) {
                            mode = Integer.parseInt(rdbtn1000.getText());
                        } else if (rdbtn5000.isSelected()) {
                            mode = Integer.parseInt(rdbtn5000.getText());
                        } else if (rdbtn10000.isSelected()) {
                            mode = Integer.parseInt(rdbtn10000.getText());
                        } else {
                            JOptionPane.showMessageDialog(null, "Επιλέξτε τιμή στο Πεδίο Mode.");
                            return;
                        }
                        if (txtE.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Το πεδίο \"Παράμετρος ε\" είναι κενό.");
                            return;
                        } else if (Float.parseFloat(txtE.getText()) <= 0) {
                            JOptionPane.showMessageDialog(null, "Η \"Παράμετρος ε\" πρέπει να είναι μεγαλύτερη του 0.");
                            return;
                        }
                        paramE = Float.parseFloat(txtE.getText());
                        taskBusyFlag = true;
                        prepareForLCSS();
                        fileMapCopy = new HashMap<>(fileMap);
                        float[][] similarities = new float[routeList.size()][routeList.size()];
                        List sortedKeys = new ArrayList(fileMap.keySet());
                        Collections.sort(sortedKeys);
                        Iterator<String> keySetIterator = sortedKeys.listIterator();
                        int compareCounter = 0;
                        while (keySetIterator.hasNext()) {
                            String key1 = keySetIterator.next();
                            while (keySetIterator.hasNext()) {
                                startTime = System.currentTimeMillis();
                                String key2 = keySetIterator.next();
                                System.out.println("Compare key1: " + key1 + " key2: " + key2);
                                ArrayList result = executeLCSS(fileMap.get(key1), fileMap.get(key2));
                                float similarityPercentage = (float) (result.size() / (float) (Math.min(fileMap.get(key1).size(), fileMap.get(key2).size()))) * 100;
                                System.out.println(" result size: " + result.size() + " min key size: " + Math.min(fileMap.get(key1).size(), fileMap.get(key2).size()) + " Similarity Percentage: " + similarityPercentage);
                                endTime = System.currentTimeMillis();
                                totalTime = endTime - startTime;
                                tblResults.setValueAt(key1, compareCounter, 0);
                                tblResults.setValueAt(key2, compareCounter, 1);
                                tblResults.setValueAt(paramE, compareCounter, 2);
                                tblResults.setValueAt(similarityPercentage, compareCounter, 3);
                                tblResults.setValueAt(totalTime, compareCounter, 4);
                                int i = 0;
                                int pos1 = 0, pos2 = 0;
                                while (i < routeList.size()) {
                                    if (routeList.get(i).equals(key1)) {
                                        pos1 = i;
                                    }
                                    if (routeList.get(i).equals(key2)) {
                                        pos2 = i;
                                    }
                                    i++;
                                }
                                similarities[pos1][pos2] = similarityPercentage;
                                similarities[pos2][pos1] = similarityPercentage;
                                compareCounter++;
                                tblResults.repaint();
                            }
                            fileMap.remove(key1);
                            keySetIterator = fileMap.keySet().iterator();
                        }
                        for (int i = 0; i < routeList.size(); i++) {
                            float maxSim = -1;
                            int kpos = -1;
                            for (int k = 0; k < similarities.length; k++) {
                                if (maxSim < similarities[i][k]) {
                                    maxSim = similarities[i][k];
                                    kpos = k;
                                }
                            }
                            System.out.println();
                            dListModel.addElement(routeList.get(i) + " is the most Similar to " + routeList.get(kpos) + " with Similarity Percentage: " + maxSim);
                            Route1 = fileMapCopy.get(routeList.get(i));
                            Route2 = fileMapCopy.get(routeList.get(kpos));
                            visualizeRoutes(Route1, Route2, routeList.get(i), routeList.get(kpos));
                        }
                        taskBusyFlag = false;
                    } else {
                        if (txtD.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Το πεδίο \"Παράμετρος δ\" είναι κενό.");
                            return;
                        } else if (Float.parseFloat(txtD.getText()) < 0 || Float.parseFloat(txtD.getText()) >= 1000) {
                            JOptionPane.showMessageDialog(null, "Η \"Παράμετρος δ\" πρέπει να είναι μεγαλύτερη του 0 και μικρότερη του 1000.");
                            return;
                        }
                        if (txtE.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Το πεδίο \"Παράμετρος ε\" είναι κενό.");
                            return;
                        } else if (Float.parseFloat(txtE.getText()) <= 0) {
                            JOptionPane.showMessageDialog(null, "Η \"Παράμετρος ε\" πρέπει να είναι μεγαλύτερη του 0.");
                            return;
                        }
                        paramE = Float.parseFloat(txtE.getText());
                        paramD = Integer.parseInt(txtD.getText());
                        taskBusyFlag = true;
                        prepareForLCSS_Altered();
                        //float[][] similarities = new float[routeList.size()][routeList.size()];
                        List sortedKeys = new ArrayList(fileMap.keySet());
                        Collections.sort(sortedKeys);
                        Iterator<String> keySetIterator = sortedKeys.listIterator();
                        int compareCounter = 0;
                        int k;
                        while (keySetIterator.hasNext()) {
                            String key1 = keySetIterator.next();
                            k = 0;
                            while (k < splits10kList.size()) {
                                float maxSim = -1;
                                String maxKey2 = null;
                                startTime = System.currentTimeMillis();
                                for (int i = 0; i < 10; i++) {
                                    String key2 = splits10kList.get(k);
                                    System.out.println("Compare key1: " + key1 + " key2: " + key2);
                                    ArrayList result = executeLCSS(fileMap.get(key1), fileMap2.get(key2));
                                    float similarityPercentage = (float) (result.size() / (float) (Math.min(fileMap.get(key1).size(), fileMap2.get(key2).size()))) * 100;
                                    if (maxSim < similarityPercentage) {
                                        maxSim = similarityPercentage;
                                        maxKey2 = key2;
                                    }
                                    System.out.println(" result size: " + result.size() + " min key size: " + Math.min(fileMap.get(key1).size(), fileMap2.get(key2).size()) + " Similarity Percentage: " + similarityPercentage);
                                    k++;
                                }
                                endTime = System.currentTimeMillis();
                                totalTime = endTime - startTime;
                                tblResults.setValueAt(key1, compareCounter, 0);
                                tblResults.setValueAt(maxKey2, compareCounter, 1);
                                tblResults.setValueAt(paramE, compareCounter, 2);
                                tblResults.setValueAt(maxSim, compareCounter, 3);
                                tblResults.setValueAt(totalTime, compareCounter, 4);
                                tblResults.setValueAt(paramD, compareCounter, 5);
                                compareCounter++;
                                tblResults.repaint();
                                Route1 = fileMap.get(key1);
                                Route2 = fileMap2.get(maxKey2);
                                visualizeRoutes(Route1, Route2, key1, maxKey2);
                            }
                        }
                        taskBusyFlag = false;
                    }
                }
            };
            thread.start();
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void visualizeRoutes(ArrayList Route1, ArrayList Route2, String FileName1, String FileName2) {
        XYSeries XYGraph1 = new XYSeries(FileName1, false);
        XYSeries XYGraph2 = new XYSeries(FileName2, false);
        float Bypass = (float) 0.1;
        Coordinate tempCoordPrev = (Coordinate) Route1.get(0);
        for (int j = 0; j < Route1.size(); j++) {
            Coordinate tempCoord = (Coordinate) Route1.get(j);
            if ((Math.abs(tempCoordPrev.getLatitude() - tempCoord.getLatitude()) < Bypass) && (Math.abs(tempCoordPrev.getLongitude() - tempCoord.getLongitude()) < Bypass)) {
                if (tempCoord.getLatitude() > 39 && tempCoord.getLatitude() < 41) {
                    if (tempCoord.getLongitude() > 115 && tempCoord.getLongitude() < 117) {
                        XYGraph1.add(tempCoord.getLongitude(), tempCoord.getLatitude());
                        tempCoordPrev = (Coordinate) Route1.get(j);
                    }
                }
            }
        }
        tempCoordPrev = (Coordinate) Route2.get(0);
        for (int j = 0; j < Route2.size(); j++) {
            Coordinate tempCoord = (Coordinate) Route2.get(j);
            if ((Math.abs(tempCoordPrev.getLatitude() - tempCoord.getLatitude()) < Bypass) && (Math.abs(tempCoordPrev.getLongitude() - tempCoord.getLongitude()) < Bypass)) {
                if (tempCoord.getLatitude() > 39 && tempCoord.getLatitude() < 41) {
                    if (tempCoord.getLongitude() > 115 && tempCoord.getLongitude() < 117) {
                        XYGraph2.add(tempCoord.getLongitude(), tempCoord.getLatitude());
                        tempCoordPrev = (Coordinate) Route2.get(j);
                    }
                }
            }
        }
        XYSeriesCollection my_data_series = new XYSeriesCollection();
        my_data_series.addSeries(XYGraph1);
        my_data_series.addSeries(XYGraph2);
        double minX = 0;
        double minY = 0;
        double maxX = 0;
        double maxY = 0;
        minX = XYGraph1.getMinX();
        minY = XYGraph1.getMinY();
        maxX = XYGraph1.getMaxX();
        maxY = XYGraph1.getMaxY();
        if (minX > XYGraph2.getMinX()) {
            minX = XYGraph2.getMinX();
        }
        if (minY > XYGraph2.getMinY()) {
            minY = XYGraph2.getMinY();
        }
        if (maxX < XYGraph2.getMaxX()) {
            maxX = XYGraph2.getMaxX();
        }
        if (maxY < XYGraph2.getMaxY()) {
            maxY = XYGraph2.getMaxY();
        }
        JFreeChart XYLineChart = ChartFactory.createXYLineChart("Trajectories Comparison Graph", "Latidue", "Longitude", my_data_series, PlotOrientation.VERTICAL, true, true, false);
        XYPlot xyPlot = XYLineChart.getXYPlot();
        XYItemRenderer renderer = xyPlot.getRenderer();
        renderer.setSeriesPaint(0, Color.blue);
        NumberAxis domain = (NumberAxis) xyPlot.getDomainAxis();
        domain.setRange(minX, maxX);
        domain.setVerticalTickLabels(true);
        NumberAxis range = (NumberAxis) xyPlot.getRangeAxis();
        range.setRange(minY, maxY);
        int width = 1920; /* Width of the image */

        int height = 1080; /* Height of the image */

        File XYlineChart = new File("./GraphResults/" + FileName1 + "-" + FileName2 + ".png");
        try {
            ChartUtilities.saveChartAsPNG(XYlineChart, XYLineChart, width, height);
        } catch (IOException ex) {
            Logger.getLogger(LCSS_GUI.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void jCheckLCSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckLCSSActionPerformed
        // TODO add your handling code here:
        if (jCheckLCSS.isSelected()) {
            pnlMode.setVisible(false);
            pnlParamD.setVisible(true);
        } else {
            pnlMode.setVisible(true);
            pnlParamD.setVisible(false);
        }
    }//GEN-LAST:event_jCheckLCSSActionPerformed

    private void prepareForLCSS_Altered() {
        try {
            // Clean GraphResults
            File graphdir = new File("./GraphResults/");
            if (!graphdir.exists())
                new File("./GraphResults/").mkdir();
            for (File file : graphdir.listFiles()) {
                file.delete();
            }
            String myDirPath1k = "./datasets/1000points/";
            String myDirPath10k = "./datasets/10000points/";
            if (coordinatesList != null) {
                coordinatesList.clear();
            }
            if (fileMap != null) {
                fileMap.clear();
            }
            if (fileMap2 != null) {
                fileMap2.clear();
            }
            if (routeList != null) {
                routeList.clear();
            }
            if (splits10kList != null) {
                splits10kList.clear();
            }
            System.gc();
            File dir = new File(myDirPath1k);
            File dir2 = new File(myDirPath10k);
            //prepape 1000 points files
            if (dir.isDirectory()) {
                for (File i : dir.listFiles()) {
                    if (i.getName().contains(".txt")) {
                        BufferedReader br = new BufferedReader(new FileReader(i));
                        String line = null;
                        Coordinate coordinates;
                        coordinatesList = new ArrayList<>();
                        String[] splitedLine;
                        line = br.readLine();
                        splitedLine = line.split(",");
                        fileName = splitedLine[0];
                        do {
                            splitedLine = line.split(",");
                            if (splitedLine.length == 4) {
                                coordinates = new Coordinate(Float.parseFloat(splitedLine[2]), Float.parseFloat(splitedLine[3]));
                                coordinatesList.add(coordinates);
                            }
                        } while ((line = br.readLine()) != null);
                        fileMap.put(fileName, coordinatesList);
                        //System.out.println("fileName: " + fileName);
                        routeList.add(fileName);
                    }
                }
            }
            //prepare 10000 points files
            if (dir2.isDirectory()) {
                for (File i : dir2.listFiles()) {
                    if (i.getName().contains(".txt")) {
                        BufferedReader br = new BufferedReader(new FileReader(i));
                        String line = null;
                        Coordinate coordinates;
                        coordinatesList = new ArrayList<>();
                        String[] splitedLine;
                        line = br.readLine();
                        splitedLine = line.split(",");
                        fileName = splitedLine[0];
                        do {
                            splitedLine = line.split(",");
                            if (splitedLine.length == 4) {
                                coordinates = new Coordinate(Float.parseFloat(splitedLine[2]), Float.parseFloat(splitedLine[3]));
                                coordinatesList.add(coordinates);

                            }
                        } while ((line = br.readLine()) != null);
                        for (int k = 0; k < 10; k++) {
                            splitName = fileName + "_" + k;
                            tempcoordList = new ArrayList<>();
                            for (int j = k * 1000; j < ((k + 1) * 1000) + paramD && j < coordinatesList.size(); j++) {
                                //System.out.println("split_k: " + k + " record_j: " + j);
                                tempcoordList.add(coordinatesList.get(j));
                            }
                            splits10kList.add(splitName);
                            fileMap2.put(splitName, tempcoordList);
                            //System.out.println("fileName: " + splitName + "\n");
                        }
                        //System.out.println("fileName: " + splitName);
                    }
                }
            }
            for (int i = 0; i < routeList.size(); i++) {
                System.out.println("1k: fileName: " + routeList.get(i));
            }
            for (int i = 0; i < splits10kList.size(); i++) {
                System.out.println("10k: fileName: " + splits10kList.get(i));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void prepareForLCSS() {
        try {
            // Clean GraphResults
            File graphdir = new File("./GraphResults/");
            if (!graphdir.exists()) {
                new File("./GraphResults/").mkdir();
            }
            for (File file : graphdir.listFiles()) {
                file.delete();
            }
            String myDirectoryPath = null;
            if (coordinatesList != null) {
                coordinatesList.clear();
            }
            if (fileMap != null) {
                fileMap.clear();
            }
            if (routeList != null) {
                routeList.clear();
            }
            System.gc();
            if (mode == 1000) {
                myDirectoryPath = "./datasets/1000points/";
            } else if (mode == 5000) {
                myDirectoryPath = "./datasets/5000points/";
            } else if (mode == 10000) {
                myDirectoryPath = "./datasets/10000points/";
            }
            File dir = new File(myDirectoryPath);
            if (dir.isDirectory()) {
                for (File i : dir.listFiles()) {
                    if (i.getName().contains(".txt")) {
                        BufferedReader br = new BufferedReader(new FileReader(i));
                        String line = null;
                        Coordinate coordinates;
                        coordinatesList = new ArrayList<>();
                        int k = 0;
                        String[] splitedLine;
                        line = br.readLine();
                        splitedLine = line.split(",");
                        fileName = splitedLine[0];
                        do {
                            splitedLine = line.split(",");
                            if (splitedLine.length == 4) {
                                coordinates = new Coordinate(Float.parseFloat(splitedLine[2]), Float.parseFloat(splitedLine[3]));
                                coordinatesList.add(coordinates);
                                k++;
                            }
                        } while ((line = br.readLine()) != null);
                        fileMap.put(fileName, coordinatesList);
                        System.out.println("fileName: " + fileName);
                        routeList.add(fileName);
                    }
                }
                //TEST OUTPUT
//                Iterator<String> keySetIterator = fileMap.keySet().iterator();
//                while (keySetIterator.hasNext()) {
//                    String key = keySetIterator.next();
//                    for (int j = 0; j < fileMap.get(key).size(); j++) {
//                        coordinatesList = fileMap.get(key);
//                        System.out.println(j + ". key: " + key
//                                + " Latitude: " + coordinatesList.get(j).getLatitude()
//                                + " Longitude: " + coordinatesList.get(j).getLongitude());
//                    }
//                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private ArrayList executeLCSS(ArrayList s1, ArrayList s2) {
        int[][] num = new int[s1.size() + 1][s2.size() + 1];  //2D array, initialized to 0

        //Actual algorithm
        for (int i = 1; i <= s1.size(); i++) {
            for (int j = 1; j <= s2.size(); j++) {
                if (compareCoordinates((Coordinate) s1.get(i - 1), (Coordinate) s2.get(j - 1))) {
                    num[i][j] = 1 + num[i - 1][j - 1];
                } else {
                    num[i][j] = Math.max(num[i - 1][j], num[i][j - 1]);
                }
            }
        }
        int s1position = s1.size(), s2position = s2.size();
        ArrayList<Coordinate> result = new ArrayList<>();

        while (s1position != 0 && s2position != 0) {
            if (compareCoordinates((Coordinate) s1.get(s1position - 1), (Coordinate) s2.get(s2position - 1))) {
                result.add((Coordinate) s1.get(s1position - 1));
                s1position--;
                s2position--;
            } else if (num[s1position][s2position - 1] >= num[s1position][s2position]) {
                s2position--;
            } else {
                s1position--;
            }
        }
        Collections.reverse(result);
        return result;
    }

    private boolean compareCoordinates(Coordinate c1, Coordinate c2) {
        return (Math.abs(c1.getLatitude() - c2.getLatitude())) < paramE && (Math.abs(c1.getLongitude() - c2.getLongitude())) < paramE;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.ButtonGroup btngrpMode;
    private javax.swing.JCheckBox jCheckLCSS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listConclusion;
    private javax.swing.JPanel pnlMode;
    private javax.swing.JPanel pnlParamD;
    private javax.swing.JPanel pnlParamE;
    private javax.swing.JRadioButton rdbtn1000;
    private javax.swing.JRadioButton rdbtn10000;
    private javax.swing.JRadioButton rdbtn5000;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField txtD;
    private javax.swing.JTextField txtE;
    // End of variables declaration//GEN-END:variables
}
